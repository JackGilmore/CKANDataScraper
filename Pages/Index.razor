@page "/"
@using System.Net
@using CKANDataScraper.Models
@using CKANDataScraper.Utilities
@using System.IO
@using CsvHelper
@using System.Globalization
@inject IJSRuntime JsRuntime;
@inject HttpClient HttpClient;

<h1>CKAN Data Scraper</h1>

<p class="lead">Paste your CKAN root URLs in the box below (one per line) and click start to process them</p>

<textarea @bind="CKANInput" class="form-control mb-3" rows="3"></textarea>

<p>@StatusText</p>

<div class="d-flex justify-content-center">
    <button class="btn btn-lg btn-primary" @onclick="StartScrape">Start</button>
</div>



@code
{
    public string CKANInput { get; set; }
    public List<DatasetEntry> DatasetEntries { get; set; } = new();
    public string StatusText;

    private void Update(string message)
    {
        StatusText = message;
    }

    private async Task StartScrape()
    {
        StatusText = "";
        if (string.IsNullOrEmpty(CKANInput))
        {
            await JsRuntime.InvokeVoidAsync("alert", "No URLs detected!");

            return;
        }

        var splitLinks = CKANInput.Split("\n");

        foreach (var ckanRootUrl in splitLinks)
        {
            var packageListUrl = new UriBuilder(ckanRootUrl)
            {
                Path = Constants.PackageListPath
            };

            var packagesList = await HttpClient.GetFromJsonAsync<CKANPackagesListResponse>(packageListUrl.ToString());

            if (packagesList == null)
            {
                Console.WriteLine("ERROR: No packages retrieved");
                Console.WriteLine("Skipping...");

                continue;
            }

            foreach (var package in packagesList.Result)
            {
                var packageRequestUrl = new UriBuilder(ckanRootUrl)
                {
                    Path = Constants.PackageShowPath,
                    Query = $"id={package}"
                };

                var packageResponse = await HttpClient.GetFromJsonAsync<CKANPackageResponse>(packageRequestUrl.ToString());

                if (packageResponse == null)
                {
                    Console.WriteLine("ERROR: Could not parse package");
                    Console.WriteLine("Skipping...");

                    continue;
                }

                var packageMetadata = packageResponse.Result;

                if (!packageMetadata.Type.Equals("dataset"))
                {
                    Console.WriteLine($"ERROR: Package type {packageMetadata.Type} is not a recognized dataset");
                    Console.WriteLine("Skipping...");
                    continue;
                }

                Console.WriteLine(packageMetadata.Title);

                Update($"Processing dataset: {packageMetadata.Title}");

                StateHasChanged();

                foreach (var resource in packageMetadata.Resources)
                {
                    var pageUrl = new UriBuilder(ckanRootUrl)
                    {
                        Path = $"/dataset/{package}",
                    };

                    var newEntry = new DatasetEntry
                    {
                        Title = packageMetadata.Title,
                        Owner = ckanRootUrl,
                        PageURL = pageUrl.Uri.AbsoluteUri,
                        AssetURL = resource.URL,
                        DateCreated = packageMetadata.DateCreated.HasValue ? packageMetadata.DateCreated.Value.ToString("yyyy-MM-dd") : "",
                        DateUpdated = packageMetadata.DateModified.HasValue ? packageMetadata.DateModified.Value.ToString("yyyy-MM-dd") : "",
                        FileSize = resource.Archiver != null ? resource.Archiver.Size.ToString() : "",
                        FileSizeUnit = resource.Archiver != null ? "B" : "",
                        FileType = resource.Format,
                        NumRecords = null,
                        OriginalTags = string.Join(';', packageMetadata.Tags.Select(x => x.Name)),
                        ManualTags = null,
                        License = packageMetadata.License,
                        Description = packageMetadata.Description
                    };

                    DatasetEntries.Add(newEntry);
                }
            }

        }
        //var content = new byte[] { 1, 2, 3 };




        await using var memoryStream = new MemoryStream();
        await using (var streamWriter = new StreamWriter(memoryStream))
        await using (var csvWriter = new CsvWriter(streamWriter, CultureInfo.CurrentCulture))
        {
            csvWriter.WriteHeader<DatasetEntry>();
            await csvWriter.NextRecordAsync();
            foreach (var entry in DatasetEntries)
            {
                csvWriter.WriteRecord(entry);
                await csvWriter.NextRecordAsync();
            }

            await JsRuntime.InvokeVoidAsync(
                "downloadFromByteArray",
                new
                {
                    ByteArray = memoryStream.ToArray(),
                    FileName = "output.csv",
                    ContentType = "application/octet-stream"
                });
        };
    }
}
